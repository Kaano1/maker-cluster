---
- name: Set up Kubernetes
  hosts: all
  become: true
  tasks:

# Disable swap on all the Nodes

    - name: 1. Disable Swap for kubeadm to work properly 
      ansible.builtin.shell:
        cmd: swapoff -a && sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#Enable IpTables Bridge traffic on all the Nodes

    - name: 2. Added overlay & br_netfilter to /etc/modules-load.d/k8s.conf  # this file ensures these modules are loaded automatically every time the system boots
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: 3. Used modprobe for immediantly loading overlay and br_netfilter in running linux kernel # loading kernel modules
      ansible.builtin.shell:
        cmd: sudo modprobe overlay && sudo modprobe br_netfilter

    - name: 4. Set iptables setting
      ansible.builtin.shell:
        cmd: cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
             net.bridge.bridge-nf-call-iptables  = 1
             net.bridge.bridge-nf-call-ip6tables = 1
             net.ipv4.ip_forward                 = 1
             EOF
      # net.bridge.bridge-nf-call-iptables = ensures that traffic passing through a linux bridge is processed by iptables rules. This is essantial for kubernetes policies
      # net.bridge.bridge-nf-call-ip6tables = Similar to the previoes setting but for ip6 traffic
      # net.ipv4.ip_forward = allows the system to forward ipv4 packages between network interfaces.

    - name: 5. Apply sysctl params without reboot
      ansible.builtin.shell:
        cmd: sysctl --system 

# Install CRI-O Runtime On All The Nodes

    
    - name: 8.2 Download software-properties-common, gpg, curl, apt-transport-https, ca-certificates
      ansible.builtin.shell:
        cmd: sudo apt-get update -y && sudo apt-get install -y software-properties-common gpg curl apt-transport-https ca-certificates
      ignore_errors: true

    - name: 8.3.1 Check if cri-o-apt-keyring.gpg exists
      ansible.builtin.stat:
        path: /etc/apt/keyrings/cri-o-apt-keyring.gpg
      register: cri_o_apt_keyring

    - name: 8.3 Download the CRI-O GPG key and save it to a keyring
      ansible.builtin.shell:
        cmd:  curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
      when: not cri_o_apt_keyring.stat.exists

    - name: 8.4 Add the CRI-O repository to APT sources list
      ansible.builtin.shell:
        cmd: echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /" | tee /etc/apt/sources.list.d/cri-o.list


      # GPG (GNU Privacy Guard), are cryptographic keys used to sign packages. By adding the GPG key for the repository, you ensure that your system can trust the packages coming from that repository.

    - name: 9. Download cri-o
      ansible.builtin.shell:
        cmd: sudo apt-get update -y && sudo apt-get install -y cri-o
      ignore_errors: true


    - name: 10. Reload the systemd configurations and enable cri-o.
      ansible.builtin.shell:
        cmd: sudo systemctl daemon-reload && sudo systemctl enable crio --now && sudo systemctl start crio.service

# Install Kubeadm & Kubelet & Kubectl

    - name: 11. Establish /etc/apt/keyrings and set Kubernetes_version
      ansible.builtin.shell:
        cmd: KUBERNETES_VERSION=1.30 && sudo mkdir -p /etc/apt/keyrings

    - name: 11. Download the GPG key for Kubernetes componants download
      ansible.builtin.shell:
        cmd: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: 11.x
      ansible.builtin.shell:
        cmd: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

    - name: 11.2 update
      ansible.builtin.shell:
        cmd: sudo apt-get update -y
      ignore_errors: true

    # /usr/share/keyrings/kubernetes-archive-keyring.gpg = It's a system-wide location typically used for storing trusted keys for package management.
    # https://dl.k8s.io/apt/doc/apt-key.gpg = The Kubernetes APT repository is a software repository where Kubernetes packages (such as kubelet, kubeadm and kubectl) are stored for installation on systems using the APT package management system (such as Debian and Ubuntu)

    - name: 12.x
      ansible.builtin.shell:
        cmd: apt-cache madison kubeadm | tac

    - name: 13. Download kubelet kubeadm kubectl
      ansible.builtin.shell:
          cmd: sudo apt-get install -y kubelet kubeadm kubectl
      
    - name: 14. apt-mark hold prevents updates kubelet, kubectl and kubeadm # if we didn't prevent it, so it can be dangerous for stability
      ansible.builtin.shell:
        cmd: sudo apt-mark hold kubelet kubeadm kubectl

    - name: 15. Downlaod jq for local_ip
      ansible.builtin.shell:
        sudo apt-get install -y jq

    - name: 16. Take the local IP address of the 'eth1' network interface
      ansible.builtin.shell:
        cmd: |
             local_ip="$(ip --json a s | jq -r '.[] | if .ifname == "eth1" then .addr_info[] | if .family == "inet" then .local else empty end else empty end')"
             cat > /etc/default/kubelet << EOF
             KUBELET_EXTRA_ARGS=--node-ip=$local_ip
             EOF


